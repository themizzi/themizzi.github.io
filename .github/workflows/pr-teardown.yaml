name: Delete Preview

on:
# Run on all closed PRs
  pull_request:
    types: [ closed ]
  # Temporary: Allow manual testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test cleanup for'
        required: true
        type: string

permissions:
  contents: read
  deployments: write

jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete Digital Ocean preview app
        uses: digitalocean/app_action/delete@v2
        with:
          from_pr_preview: true
          ignore_not_found: true
          token: ${{ secrets.DIGITAL_OCEAN_ACCESS_TOKEN }}

      - name: Mark GitHub deployment as inactive
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number || context.payload.inputs?.pr_number;
            const environment = `pr-${prNumber}`;
            
            // Get all deployments for this repository
            const { data: deployments } = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              environment: environment,
              per_page: 100
            });
            
            console.log(`Found ${deployments.length} deployments for environment: ${environment}`);
            
            // Mark all deployments for this PR environment as inactive
            for (const deployment of deployments) {
              try {
                await github.rest.repos.createDeploymentStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id,
                  state: 'inactive',
                  description: `PR #${prNumber} closed - environment cleaned up`
                });
                console.log(`Marked deployment ${deployment.id} as inactive`);
              } catch (error) {
                console.log(`Failed to mark deployment ${deployment.id} as inactive: ${error.message}`);
              }
            }

      - name: Delete GitHub environment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request?.number || context.payload.inputs?.pr_number;
            const environment = `pr-${prNumber}`;
            
            try {
              await github.rest.repos.deleteAnEnvironment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: environment
              });
              console.log(`Successfully deleted environment: ${environment}`);
            } catch (error) {
              if (error.status === 404) {
                console.log(`Environment ${environment} not found - may have already been deleted`);
              } else {
                console.log(`Failed to delete environment ${environment}: ${error.message}`);
              }
            }
